{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('.js-btn');\n\nlet userSelectedDate;\nlet countdownInterval;\nstartButton.disabled = true;\n\nconst el = {\n  daysValue: document.querySelector('.js-days'),\n  hoursValue: document.querySelector('.js-hours'),\n  minutesValue: document.querySelector('.js-minutes'),\n  secondsValue: document.querySelector('.js-seconds'),\n};\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n  countdownInterval = setInterval(updateTimer, 1000);\n});\n\nfunction updateTimer() {\n  const curentDate = new Date();\n  const timeDifference = userSelectedDate - curentDate;\n\n  if (timeDifference <= 0) {\n    clearInterval(countdownInterval);\n    datetimePicker.disabled = false;\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n  el.daysValue.textContent = addLeadingZero(days);\n  el.hoursValue.textContent = addLeadingZero(hours);\n  el.minutesValue.textContent = addLeadingZero(minutes);\n  el.secondsValue.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["datetimePicker","startButton","userSelectedDate","countdownInterval","el","options","selectedDates","selectedDate","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","updateTimer","timeDifference","addLeadingZero","value"],"mappings":"2GAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,SAAS,EAEpD,IAAIC,EACAC,EACJF,EAAY,SAAW,GAEvB,MAAMG,EAAK,CACT,UAAW,SAAS,cAAc,UAAU,EAC5C,WAAY,SAAS,cAAc,WAAW,EAC9C,aAAc,SAAS,cAAc,aAAa,EAClD,aAAc,SAAS,cAAc,aAAa,CACpD,EAEMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDP,EAAY,SAAW,KAEvBC,EAAmBK,EACnBN,EAAY,SAAW,GAE1B,CACH,EAEAQ,EAAUT,EAAgBK,CAAO,EAEjC,SAASK,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAd,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAC1BG,EAAoB,YAAYa,EAAa,GAAI,CACnD,CAAC,EAED,SAASA,GAAc,CAErB,MAAMC,EAAiBf,EADJ,IAAI,KAGvB,GAAIe,GAAkB,EAAG,CACvB,cAAcd,CAAiB,EAC/BH,EAAe,SAAW,GAC1B,MACD,CAED,KAAM,CAAE,KAAAY,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUO,CAAc,EAElEb,EAAG,UAAU,YAAcc,EAAeN,CAAI,EAC9CR,EAAG,WAAW,YAAcc,EAAeL,CAAK,EAChDT,EAAG,aAAa,YAAcc,EAAeJ,CAAO,EACpDV,EAAG,aAAa,YAAcc,EAAeH,CAAO,CACtD,CAEA,SAASG,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}